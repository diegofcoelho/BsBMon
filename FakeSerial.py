# coding=utf-8
# fakeSerial.py
# D. Thiebaut
# A very crude simulator for PySerial assuming it
# is emulating an Arduino.


# a Serial class emulator
import random


class Serial:
    ## init(): the constructor.  Many of the arguments have default values
    # and can be skipped when calling the constructor.
    def __init__(self, port='COM69', baudrate=9600, timeout=1,
                 bytesize=7, parity='N', stopbits=1, xonxoff=0,
                 rtscts=0):
        self.name = port
        self.port = port
        self.timeout = timeout
        self.parity = parity
        self.baudrate = baudrate
        self.bytesize = bytesize
        self.stopbits = stopbits
        self.xonxoff = xonxoff
        self.rtscts = rtscts
        self._isOpen = True
        self._receivedData = ""
        self._data = "It was the best of times.\nIt was the worst of times.\n"
        self._data = [
            b'2020393a3137207c202032332e39207c202020323530207c2020372e3131207c202020352e30207c20202020203330207c20202020203230207c20202020203130207c2020202020323530207c20202020203430207c2020203130322e30207c20202020203130207c20202031302e30207c20202031322e30207c2020392e3030207c2030203020300d0a',
            b"2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D0A0D",
            b"0A0F422E20425241554E202042494F5354415420422020202020202020202020444154452F54494D45202032302E30352E3136202020393A30360D0A0D0A0D0A2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D2D0D0A2054494D4520207C2054454D5020207C205354495252207C207048202020207C20704F322020207C204143494420207C204241534520207C2041464F414D207C204C4556454C207C205355423154207C205355425331207C205355423254207C205355425332207C204741534D58207C20414952464C207C2046204C20480D0A2068683A6D6D207C202078432020207C202072706D20207C202070482020207C202025202020207C20206D6C2020207C20206D6C2020207C20206D6C2020207C20206D6C2020207C20206D6C2020207C202025202020207C20206D6C2020207C202025202020207C202025202020207C20206C2F6D20207C204F204520490D0A2D2D2D2D2D2D2D7C2D2D2D2D2D2D2D7C2D2D2D2D2D2D2D7C2D2D2D2D2D2D2D7C2D2D2D2D2D2D2D7C2D2D2D2D2D2D2D7C2D2D2D2D2D2D2D7C2D2D2D2D2D2D2D7C2D2D2D2D2D2D2D7C2D2D2D2D2D2D2D7C2D2D2D2D2D2D2D7C2D2D2D2D2D2D2D7C2D2D2D2D2D2D2D7C2D2D2D2D2D2D2D7C2D2D2D2D2D2D2D7C204D205620200D0A",
            b'2020393a3137207c202032332e39207c202020323530207c2020372e3131207c202020352e30207c20202020203330207c20202020203230207c20202020203130207c2020202020323530207c20202020203430207c2020203130322e30207c20202020203130207c20202031302e30207c20202031322e30207c2020392e3030207c2030203020300d0a',
            b"2020393A3036207C202032332E38207C202020323030207C2020372E3130207C202020302E30207C202020202030207C202020202030207C202020202030207C202020202030207C202020202030207C202020302E30207C202020202030207C202020302E30207C202020302E30207C2020302E3030207C2030203020300D0A",
            b"2020393A3037207C202032332E39207C202020323030207C2020372E3131207C202020302E30207C202020202030207C202020202030207C202020202030207C202020202030207C202020202030207C202020302E30207C202020202030207C202020302E30207C202020302E30207C2020302E3030207C2030203020300D0A",
            b"2020393A3038207C202032332E38207C202020323030207C2020372E3131207C202020302E30207C202020202030207C202020202030207C202020202030207C202020202030207C202020202030207C202020302E30207C202020202030207C202020302E30207C202020302E30207C2020302E3030207C2030203020300D0A",
            b"2020393A3039207C202032332E39207C202020323030207C2020372E3039207C202020302E30207C202020202030207C202020202030207C202020202030207C202020202030207C202020202030207C202020302E30207C202020202030207C202020302E30207C202020302E30207C2020302E3030207C2030203020300D0A",
            b"2020393A3130207C202032332E39207C202020323030207C2020372E3039207C202020302E30207C202020202030207C202020202030207C202020202030207C202020202030207C202020202030207C202020302E30207C202020202030207C202020302E30207C202020302E30207C2020302E3030207C2030203020300D0A",
            b"2020393A3131207C202032332E39207C202020323030207C2020372E3130207C202020302E30207C202020202030207C202020202030207C202020202030207C202020202030207C202020202030207C202020302E30207C202020202030207C202020302E30207C202020302E30207C2020302E3030207C2030203020300D0A",
            b'2020393a3137207c202032332e39207c202020323530207c2020372e3131207c202020352e30207c20202020203330207c20202020203230207c20202020203130207c2020202020323530207c20202020203430207c2020203130322e30207c20202020203130207c20202031302e30207c20202031322e30207c2020392e3030207c2030203020300d0a',
            b"2020393A3132207C202032332E39207C202020323030207C2020372E3131207C202020302E30207C202020202030207C202020202030207C202020202030207C202020202030207C202020202030207C202020302E30207C202020202030207C202020302E30207C202020302E30207C2020302E3030207C2030203020300D0A",
            b"2020393A3133207C202032332E39207C202020323030207C2020372E3130207C202020302E30207C202020202030207C202020202030207C202020202030207C202020202030207C202020202030207C202020302E30207C202020202030207C202020302E30207C202020302E30207C2020302E3030207C2030203020300D0A"
        ]

    ## isOpen()
    # returns True if the port to the Arduino is open.  False otherwise
    def isOpen(self):
        return self._isOpen

    ## open()
    # opens the port
    def open(self):
        self._isOpen = True

    ## close()
    # closes the port
    def close(self):
        self._isOpen = False

    ## write()
    # writes a string of characters to the Arduino
    def write(self, string):
        print('Arduino got: "' + string + '"')
        self._receivedData += string

    ## read()
    # reads n characters from the fake Arduino. Actually n characters
    # are read from the string _data and returned to the caller.
    def read(self, n=1):
        # s = self._data[0:n]
        s = self._data[random.randint(0, len(self._data) - 1)]
        #self._data = self._data[n:]
        # print( "read: now self._data = ", self._data )
        return s

    # readline()
    # reads characters from the fake Arduino until a \n is found.
    def readline(self):
        returnIndex = self._data.index("\n")
        if returnIndex != -1:
            s = self._data[0:returnIndex + 1]
            self._data = self._data[returnIndex + 1:]
            return s
        else:
            return ""

    ## __str__()
    # returns a string representation of the serial class
    def __str__(self):
        return "Serial<id=0xa81c10, open=%s>( port='%s', baudrate=%d," \
               % (str(self.isOpen), self.port, self.baudrate) \
               + " bytesize=%d, parity='%s', stopbits=%d, xonxoff=%d, rtscts=%d)" \
                 % (self.bytesize, self.parity, self.stopbits, self.xonxoff,
                    self.rtscts)
